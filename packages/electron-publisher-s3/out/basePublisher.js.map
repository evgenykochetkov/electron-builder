{"version":3,"file":"basePublisher.js","sourceRoot":"","sources":["../src/basePublisher.ts"],"names":[],"mappings":"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","sourcesContent":["import S3, { ClientConfiguration, CreateMultipartUploadRequest, ObjectCannedACL } from \"aws-sdk/clients/s3\"\nimport { Arch, debug } from \"builder-util\"\nimport { BaseS3Options } from \"builder-util-runtime\"\nimport { ProgressCallback, PublishContext, Publisher } from \"electron-publish\"\nimport { ensureDir, stat, symlink } from \"fs-extra-p\"\nimport mime from \"mime\"\nimport * as path from \"path\"\nimport { Uploader } from \"./uploader\"\n\nexport abstract class BaseS3Publisher extends Publisher {\n  constructor(context: PublishContext, private options: BaseS3Options) {\n    super(context)\n  }\n\n  protected abstract getBucketName(): string\n\n  protected configureS3Options(s3Options: CreateMultipartUploadRequest) {\n    // if explicitly set to null, do not add\n    if (this.options.acl !== null) {\n      s3Options.ACL = this.options.acl as ObjectCannedACL || \"public-read\"\n    }\n  }\n\n  protected createClientConfiguration(): ClientConfiguration {\n    return {signatureVersion: \"v4\"}\n  }\n\n  // http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/s3-example-creating-buckets.html\n  async upload(file: string, arch: Arch, safeArtifactName?: string): Promise<any> {\n    const fileName = path.basename(file)\n    const fileStat = await stat(file)\n    const cancellationToken = this.context.cancellationToken\n\n    const target = (this.options.path == null ? \"\" : `${this.options.path}/`) + fileName\n\n    if (process.env.__TEST_S3_PUBLISHER__ != null) {\n      const testFile = path.join(process.env.__TEST_S3_PUBLISHER__!, target)\n      await ensureDir(path.dirname(testFile))\n      await symlink(file, testFile)\n      return\n    }\n\n    const s3Options: CreateMultipartUploadRequest  = {\n      Key: target,\n      Bucket: this.getBucketName(),\n      ContentType: mime.getType(file) || \"application/octet-stream\"\n    }\n    this.configureS3Options(s3Options)\n\n    const uploader = new Uploader(new S3(this.createClientConfiguration()), s3Options, file, fileStat)\n\n    const progressBar = this.createProgressBar(fileName, fileStat)\n    if (progressBar != null) {\n      const callback = new ProgressCallback(progressBar)\n      uploader.on(\"progress\", () => {\n        if (!cancellationToken.cancelled) {\n          callback.update(uploader.loaded, uploader.contentLength)\n        }\n      })\n    }\n\n    return cancellationToken.createPromise((resolve, reject, onCancel) => {\n      onCancel(() => uploader.abort())\n      uploader.upload()\n        .then(() => {\n          try {\n            debug(`${this.providerName} Publisher: ${fileName} was uploaded to ${this.getBucketName()}`)\n          }\n          finally {\n            resolve()\n          }\n        })\n        .catch(reject)\n    })\n  }\n\n  toString() {\n    return `${this.providerName} (bucket: ${this.getBucketName()})`\n  }\n}"]}
