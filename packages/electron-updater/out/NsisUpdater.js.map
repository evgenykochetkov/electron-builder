{"version":3,"file":"NsisUpdater.js","sourceRoot":"","sources":["../src/NsisUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationError, CancellationToken, DownloadOptions, GenericServerOptions, PublishConfiguration, VersionInfo } from \"builder-util-runtime\"\nimport { BLOCK_MAP_FILE_NAME } from \"builder-util-runtime/out/blockMapApi\"\nimport { spawn } from \"child_process\"\nimport { mkdtemp, remove } from \"fs-extra-p\"\nimport { tmpdir } from \"os\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DifferentialDownloader } from \"./differentialPackage\"\nimport { DownloadedUpdateHelper } from \"./DownloadedUpdateHelper\"\nimport { DOWNLOAD_PROGRESS, FileInfo, UPDATE_DOWNLOADED } from \"./main\"\nimport { verifySignature } from \"./windowsExecutableCodeSignatureVerifier\"\n\nexport class NsisUpdater extends AppUpdater {\n  private readonly downloadedUpdateHelper = new DownloadedUpdateHelper()\n\n  private quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  constructor(options?: PublishConfiguration | GenericServerOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  /*** @private */\n  protected async doDownloadUpdate(versionInfo: VersionInfo, fileInfo: FileInfo, cancellationToken: CancellationToken): Promise<Array<string>> {\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: this.computeRequestHeaders(fileInfo),\n      cancellationToken,\n      sha512: fileInfo == null ? null : fileInfo.sha512,\n    }\n\n    let packagePath: string | null = this.downloadedUpdateHelper.packagePath\n\n    let installerPath = this.downloadedUpdateHelper.getDownloadedFile(versionInfo, fileInfo)\n    if (installerPath != null) {\n      return packagePath == null ? [installerPath] : [installerPath, packagePath]\n    }\n\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    // use TEST_APP_TMP_DIR if defined and developer machine (must be not windows due to security reasons - we must not use env var in the production)\n    const tempDir = await mkdtemp(`${path.join((process.platform === \"darwin\" ? process.env.TEST_APP_TMP_DIR : null) || tmpdir(), \"up\")}-`)\n    installerPath = path.join(tempDir, fileInfo.name)\n\n    const removeTempDirIfAny = () => {\n      this.downloadedUpdateHelper.clear()\n      return remove(tempDir)\n        .catch(() => {\n          // ignored\n        })\n    }\n\n    let signatureVerificationStatus\n    try {\n      await this.httpExecutor.download(fileInfo.url, installerPath, downloadOptions)\n      signatureVerificationStatus = await this.verifySignature(installerPath)\n\n      const packageInfo = fileInfo.packageInfo\n      if (packageInfo != null) {\n        packagePath = path.join(tempDir, `${fileInfo.name}-package${path.extname(packageInfo.file) || \".7z\"}`)\n\n        let isDownloadFull = packageInfo.blockMapSize == null || packageInfo.headerSize == null\n        if (!isDownloadFull) {\n          try {\n            await new DifferentialDownloader(packageInfo, this.httpExecutor,\n              {\n                oldBlockMapFile: path.join(process.resourcesPath!, \"..\", BLOCK_MAP_FILE_NAME),\n                oldPackageFile: path.join(process.resourcesPath!, \"..\", \"package.7z\"),\n                logger: this._logger,\n                packagePath,\n                requestHeaders: this.requestHeaders,\n              }).download()\n          }\n          catch (e) {\n            this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n            // during test (developer machine mac or linux) we must throw error\n            isDownloadFull = process.platform === \"win32\"\n          }\n        }\n\n        if (isDownloadFull) {\n          await this.httpExecutor.download(packageInfo.file, packagePath!!, {\n            skipDirCreation: true,\n            headers: this.computeRequestHeaders(fileInfo),\n            cancellationToken,\n            sha512: packageInfo.sha512,\n          })\n        }\n      }\n    }\n    catch (e) {\n      await removeTempDirIfAny()\n\n      if (e instanceof CancellationError) {\n        this.emit(\"update-cancelled\", this.versionInfo)\n        this._logger.info(\"Cancelled\")\n      }\n      throw e\n    }\n\n    if (signatureVerificationStatus != null) {\n      await removeTempDirIfAny()\n      // noinspection ThrowInsideFinallyBlockJS\n      throw new Error(`New version ${this.versionInfo!.version} is not signed by the application owner: ${signatureVerificationStatus}`)\n    }\n\n    this._logger.info(`New version ${this.versionInfo!.version} has been downloaded to ${installerPath}`)\n    this.downloadedUpdateHelper.setDownloadedFile(installerPath, packagePath, versionInfo, fileInfo)\n    this.addQuitHandler()\n    this.emit(UPDATE_DOWNLOADED, this.versionInfo)\n    return packagePath == null ? [installerPath] : [installerPath, packagePath]\n  }\n\n  // $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n  // | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n  // | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\n  private async verifySignature(tempUpdateFile: string): Promise<string | null> {\n    let publisherName: Array<string> | string | null\n    try {\n      publisherName = (await this.configOnDisk.value).publisherName\n      if (publisherName == null) {\n        return null\n      }\n    }\n    catch (e) {\n      if (e.code === \"ENOENT\") {\n        // no app-update.yml\n        return null\n      }\n      throw e\n    }\n    return await verifySignature(Array.isArray(publisherName) ? publisherName : [publisherName], tempUpdateFile, this._logger)\n  }\n\n  private addQuitHandler() {\n    if (this.quitHandlerAdded) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.on(\"quit\", () => {\n      this._logger.info(\"Auto install update on quit\")\n      this.install(true, false)\n    })\n  }\n\n  quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): void {\n    if (this.install(isSilent, isForceRunAfter)) {\n      this.app.quit()\n    }\n  }\n\n  private install(isSilent: boolean, isForceRunAfter: boolean): boolean {\n    if (this.quitAndInstallCalled) {\n      return false\n    }\n\n    const installerPath = this.downloadedUpdateHelper.file\n    if (!this.updateAvailable || installerPath == null) {\n      this.dispatchError(new Error(\"No update available, can't quit and install\"))\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    const args = [\"--updated\"]\n    if (isSilent) {\n      args.push(\"/S\")\n    }\n\n    if (isForceRunAfter) {\n      args.push(\"--force-run\")\n    }\n\n    const packagePath = this.downloadedUpdateHelper.packagePath\n    if (packagePath != null) {\n      // only = form is supported\n      args.push(`--package-file=${packagePath}`)\n    }\n\n    const spawnOptions = {\n      detached: true,\n      stdio: \"ignore\",\n    }\n\n    try {\n      spawn(installerPath, args, spawnOptions)\n        .unref()\n    }\n    catch (e) {\n      // yes, such errors dispatched not as error event\n      // https://github.com/electron-userland/electron-builder/issues/1129\n      if ((e as any).code === \"UNKNOWN\" || (e as any).code === \"EACCES\") { // Node 8 sends errors: https://nodejs.org/dist/latest-v8.x/docs/api/errors.html#errors_common_system_errors\n        this._logger.info(\"Access denied or UNKNOWN error code on spawn, will be executed again using elevate\")\n        try {\n          spawn(path.join(process.resourcesPath!, \"elevate.exe\"), [installerPath].concat(args), spawnOptions)\n            .unref()\n        }\n        catch (e) {\n          this.dispatchError(e)\n        }\n      }\n      else {\n        this.dispatchError(e)\n      }\n    }\n\n    return true\n  }\n}"]}
