{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, PackageFileInfo, ProgressInfo, UpdateInfo, VersionInfo } from \"builder-util-runtime\"\nimport { EventEmitter } from \"events\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { LoginCallback } from \"./electronHttpExecutor\"\n\nexport { NET_SESSION_NAME } from \"./electronHttpExecutor\"\nexport { AppUpdater, NoOpLogger } from \"./AppUpdater\"\nexport { UpdateInfo, VersionInfo }\nexport { CancellationToken } from \"builder-util-runtime\"\nexport { Provider } from \"./Provider\"\n\n// autoUpdater to mimic electron bundled autoUpdater\nlet _autoUpdater: any\n\n// required for jsdoc\nexport declare const autoUpdater: AppUpdater\n\nfunction _load_autoUpdater(): AppUpdater {\n  // tslint:disable:prefer-conditional-expression\n  if (process.platform === \"win32\") {\n    _autoUpdater = new (require(\"./NsisUpdater\").NsisUpdater)()\n  }\n  else if (process.platform === \"darwin\") {\n    _autoUpdater = new (require(\"./MacUpdater\").MacUpdater)()\n  }\n  else {\n    _autoUpdater = require(\"electron\").autoUpdater\n  }\n  return _autoUpdater\n}\n\nObject.defineProperty(exports, \"autoUpdater\", {\n  enumerable: true,\n  get: () => {\n    return _autoUpdater || _load_autoUpdater()\n  }\n})\n\nexport interface FileInfo {\n  readonly name: string\n  readonly url: string\n\n  packageInfo?: PackageFileInfo\n\n  readonly sha2?: string\n  readonly sha512?: string\n\n  readonly headers?: OutgoingHttpHeaders\n}\n\n// due to historical reasons for windows we use channel name without platform specifier\nexport function getDefaultChannelName() {\n  return `latest${getChannelFilePrefix()}`\n}\n\nfunction getChannelFilePrefix() {\n  return getCurrentPlatform() === \"darwin\" ? \"-mac\" : \"\"\n}\n\nexport function getCustomChannelName(channel: string) {\n  return `${channel}${getChannelFilePrefix()}`\n}\n\nexport function getCurrentPlatform() {\n  return process.env.TEST_UPDATER_PLATFORM || process.platform\n}\n\nexport function isUseOldMacProvider() {\n  // getCurrentPlatform() === \"darwin\"\n  return false\n}\n\nexport function getChannelFilename(channel: string) {\n  return `${channel}.yml`\n}\n\nexport interface UpdateCheckResult {\n  readonly versionInfo: VersionInfo\n  readonly fileInfo?: FileInfo\n\n  readonly downloadPromise?: Promise<Array<string>> | null\n\n  readonly cancellationToken?: CancellationToken\n}\n\nexport const DOWNLOAD_PROGRESS = \"download-progress\"\nexport const UPDATE_DOWNLOADED = \"update-downloaded\"\n\nexport type LoginHandler = (authInfo: any, callback: LoginCallback) => void\n\nexport class UpdaterSignal {\n  constructor(private emitter: EventEmitter) {\n  }\n\n  /**\n   * Emitted when an authenticating proxy is [asking for user credentials](https://github.com/electron/electron/blob/master/docs/api/client-request.md#event-login).\n   */\n  login(handler: LoginHandler) {\n    addHandler(this.emitter, \"login\", handler)\n  }\n\n  progress(handler: (info: ProgressInfo) => void) {\n    addHandler(this.emitter, DOWNLOAD_PROGRESS, handler)\n  }\n\n  updateDownloaded(handler: (info: VersionInfo) => void) {\n    addHandler(this.emitter, UPDATE_DOWNLOADED, handler)\n  }\n\n  updateCancelled(handler: (info: VersionInfo) => void) {\n    addHandler(this.emitter, \"update-cancelled\", handler)\n  }\n}\n\nconst isLogEvent = false\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: (...args: Array<any>) => void) {\n  if (isLogEvent) {\n    emitter.on(event, (...args: Array<any>) => {\n      console.log(\"%s %s\", event, args)\n      handler.apply(null, args)\n    })\n  }\n  else {\n    emitter.on(event, handler)\n  }\n}\n\nexport interface Logger {\n  info(message?: any): void\n\n  warn(message?: any): void\n\n  error(message?: any): void\n\n  debug?(message: string): void\n}\n\n// if baseUrl path doesn't ends with /, this path will be not prepended to passed pathname for new URL(input, base)\n/** @internal */\nexport function newBaseUrl(url: string) {\n  const result = new URL(url)\n  if (!result.pathname.endsWith(\"/\")) {\n    result.pathname += \"/\"\n  }\n  return result\n}\n\n/** @internal */\nexport function newUrlFromBase(pathname: string, baseUrl: URL): URL {\n  const result = new URL(pathname, baseUrl)\n  // search is not propagated\n  if (!result.search && baseUrl.search) {\n    result.search = baseUrl.search\n  }\n  return result\n}"]}
