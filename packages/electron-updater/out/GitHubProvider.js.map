{"version":3,"file":"GitHubProvider.js","sourceRoot":"","sources":["../src/GitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, githubUrl, HttpError, HttpExecutor, UpdateInfo } from \"builder-util-runtime\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { FileInfo, getChannelFilename, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider } from \"./main\"\n\nexport abstract class BaseGitHubProvider<T extends UpdateInfo> extends Provider<T> {\n  // so, we don't need to parse port (because node http doesn't support host as url does)\n  protected readonly baseUrl: URL\n\n  constructor(protected readonly options: GithubOptions, defaultHost: string, executor: HttpExecutor<any>) {\n    super(executor)\n\n    this.baseUrl = newBaseUrl(githubUrl(options, defaultHost))\n  }\n\n  protected computeGithubBasePath(result: string) {\n    // https://github.com/electron-userland/electron-builder/issues/1903#issuecomment-320881211\n    const host = this.options.host\n    return host != null && host !== \"github.com\" && host !== \"api.github.com\" ? `/api/v3${result}` : result\n  }\n}\n\nexport class GitHubProvider extends BaseGitHubProvider<UpdateInfo> {\n  constructor(protected readonly options: GithubOptions, private readonly updater: AppUpdater, executor: HttpExecutor<any>) {\n    super(options, \"github.com\", executor)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const basePath = this.basePath\n    const cancellationToken = new CancellationToken()\n\n    const xElement = require(\"xelement\")\n    const feedXml = await this.httpRequest(newUrlFromBase(`${basePath}.atom`, this.baseUrl), {\n      Accept: \"application/xml, application/atom+xml, text/xml, */*\",\n    }, cancellationToken)\n\n    const feed = new xElement.Parse(feedXml)\n    const latestRelease = feed.element(\"entry\")\n    if (latestRelease == null) {\n      throw new Error(`No published versions on GitHub`)\n    }\n\n    let version: string | null\n    try {\n      if (this.updater.allowPrerelease) {\n        version = latestRelease.element(\"link\").getAttr(\"href\").match(/\\/tag\\/v?([^\\/]+)$/)[1]\n      }\n      else {\n        version = await this.getLatestVersionString(basePath, cancellationToken)\n      }\n    }\n    catch (e) {\n      throw new Error(`Cannot parse releases feed: ${e.stack || e.message},\\nXML:\\n${feedXml}`)\n    }\n\n    if (version == null) {\n      throw new Error(`No published versions on GitHub`)\n    }\n\n    let result: UpdateInfo\n    const channelFile = getChannelFilename(getDefaultChannelName())\n    const channelFileUrl = newUrlFromBase(this.getBaseDownloadPath(version, channelFile), this.baseUrl)\n    const requestOptions = this.createRequestOptions(channelFileUrl)\n    let rawData: string\n    try {\n      rawData = (await this.executor.request(requestOptions, cancellationToken))!!\n    }\n    catch (e) {\n      if (!this.updater.allowPrerelease) {\n        if (e instanceof HttpError && e.response.statusCode === 404) {\n          throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}`)\n        }\n      }\n      throw e\n    }\n\n    try {\n      result = safeLoad(rawData)\n    }\n    catch (e) {\n      throw new Error(`Cannot parse update info from ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}, rawData: ${rawData}`)\n    }\n\n    Provider.validateUpdateInfo(result)\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = `${githubUrl(this.options)}/${requestOptions.path}`\n    }\n\n    if (result.releaseName == null) {\n      (result as any).releaseName = latestRelease.getElementValue(\"title\")\n    }\n    if (result.releaseNotes == null) {\n      (result as any).releaseNotes = latestRelease.getElementValue(\"content\")\n    }\n    return result\n  }\n\n  private async getLatestVersionString(basePath: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const url = newUrlFromBase(`${basePath}/latest`, this.baseUrl)\n    try {\n      // do not use API to avoid limit\n      const rawData = await this.httpRequest(url, {Accept: \"application/json\"}, cancellationToken)\n      if (rawData == null) {\n        return null\n      }\n\n      const releaseInfo: GithubReleaseInfo = JSON.parse(rawData)\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      throw new Error(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`)\n    }\n  }\n\n  private get basePath() {\n    return this.computeGithubBasePath(`/${this.options.owner}/${this.options.repo}/releases`)\n  }\n\n  async getUpdateFile(versionInfo: UpdateInfo): Promise<FileInfo> {\n    if (isUseOldMacProvider()) {\n      return versionInfo as any\n    }\n\n    // space is not supported on GitHub\n    const name = versionInfo.githubArtifactName || path.posix.basename(versionInfo.path).replace(/ /g, \"-\")\n    const result: FileInfo = {\n      name,\n      url: newUrlFromBase(this.getBaseDownloadPath(versionInfo.version, name), this.baseUrl).href,\n      sha512: versionInfo.sha512,\n    }\n\n    const packages = versionInfo.packages\n    const packageInfo = packages == null ? null : (packages[process.arch] || packages.ia32)\n    if (packageInfo != null) {\n      result.packageInfo = {\n        ...packageInfo,\n        file: newUrlFromBase(this.getBaseDownloadPath(versionInfo.version, packageInfo.file), this.baseUrl).href,\n      }\n    }\n    return result\n  }\n\n  private getBaseDownloadPath(version: string, fileName: string) {\n    return `${this.basePath}/download/${this.options.vPrefixedTagName === false ? \"\" : \"v\"}${version}/${fileName}`\n  }\n}\n\ninterface GithubReleaseInfo {\n  readonly tag_name: string\n}"]}
