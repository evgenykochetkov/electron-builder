{"version":3,"file":"differentialPackage.js","sourceRoot":"","sources":["../src/differentialPackage.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { configureRequestOptionsFromUrl, DigestTransform, HttpError, HttpExecutor, PackageFileInfo, safeGetHeader } from \"builder-util-runtime\"\nimport { BlockMap, BlockMapFile, SIGNATURE_HEADER_SIZE } from \"builder-util-runtime/out/blockMapApi\"\nimport { close, createReadStream, createWriteStream, open, readFile } from \"fs-extra-p\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport { Logger } from \"./main\"\n\nconst inflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").inflateRaw)\n\nexport class DifferentialDownloaderOptions {\n  readonly oldBlockMapFile: string\n  readonly oldPackageFile: string\n  readonly logger: Logger\n  readonly packagePath: string\n\n  readonly requestHeaders: OutgoingHttpHeaders | null\n}\n\nexport class DifferentialDownloader {\n  private readonly baseRequestOptions: RequestOptions\n\n  private fileMetadataBuffer: Buffer\n\n  private readonly logger: Logger\n\n  constructor(private readonly packageInfo: PackageFileInfo, private readonly httpExecutor: HttpExecutor<any>, private readonly options: DifferentialDownloaderOptions) {\n    this.logger = options.logger\n    this.baseRequestOptions = configureRequestOptionsFromUrl(packageInfo.file, {})\n  }\n\n  private createRequestOptions(method: \"head\" | \"get\" = \"get\"): RequestOptions {\n    return {\n      ...this.baseRequestOptions,\n      method,\n      headers: {\n        ...this.options.requestHeaders,\n        Accept: \"*/*\",\n      } as any,\n    }\n  }\n\n  async download() {\n    const packageInfo = this.packageInfo\n    const offset = packageInfo.size - packageInfo.headerSize!! - packageInfo.blockMapSize!!\n    this.fileMetadataBuffer = await this.readRemoteBytes(offset, packageInfo.size - 1)\n\n    const oldBlockMap = safeLoad(await readFile(this.options.oldBlockMapFile, \"utf-8\"))\n    const newBlockMap = await readBlockMap(this.fileMetadataBuffer.slice(this.packageInfo.headerSize!!))\n\n    // we don't check other metadata like compressionMethod - generic check that it is make sense to differentially update is suitable for it\n    if (oldBlockMap.hashMethod !== newBlockMap.hashMethod) {\n      throw new Error(`hashMethod is different (${oldBlockMap.hashMethod} - ${newBlockMap.hashMethod}), full download is required`)\n    }\n    if (oldBlockMap.blockSize !== newBlockMap.blockSize) {\n      throw new Error(`blockSize is different (${oldBlockMap.blockSize} - ${newBlockMap.blockSize}), full download is required`)\n    }\n\n    const operations = this.computeOperations(oldBlockMap, newBlockMap)\n    if (this.logger.debug != null) {\n      this.logger.debug(JSON.stringify(operations, null, 2))\n    }\n\n    let downloadSize = 0\n    let copySize = 0\n    for (const operation of operations) {\n      const length = operation.end - operation.start\n      if (operation.kind === OperationKind.DOWNLOAD) {\n        downloadSize += length\n      }\n      else {\n        copySize += length\n      }\n    }\n\n    const newPackageSize = this.packageInfo.size\n    if ((downloadSize + copySize + this.fileMetadataBuffer.length + 32) !== newPackageSize) {\n      throw new Error(`Internal error, size mismatch: downloadSize: ${downloadSize}, copySize: ${copySize}, newPackageSize: ${newPackageSize}`)\n    }\n\n    this.logger.info(`Full: ${formatBytes(newPackageSize)}, To download: ${formatBytes(downloadSize)} (${formatBytes(((newPackageSize - downloadSize) / newPackageSize) * 100, \"%\")})`)\n\n    await this.downloadFile(operations)\n  }\n\n  private async downloadFile(operations: Array<Operation>) {\n    // todo we can avoid download remote and construct manually\n    const signature = await this.readRemoteBytes(0, SIGNATURE_HEADER_SIZE - 1)\n\n    const oldFileFd = await open(this.options.oldPackageFile, \"r\")\n    await new BluebirdPromise((resolve, reject) => {\n      const streams: Array<any> = []\n      const digestTransform = new DigestTransform(this.packageInfo.sha512)\n      // to simply debug, do manual validation to allow file to be fully written\n      digestTransform.isValidateOnEnd = false\n      streams.push(digestTransform)\n\n      const fileOut = createWriteStream(this.options.packagePath)\n      fileOut.on(\"finish\", () => {\n        (fileOut.close as any)(() => {\n          try {\n            digestTransform.validate()\n          }\n          catch (e) {\n            reject(e)\n            return\n          }\n\n          resolve()\n        })\n      })\n\n      streams.push(fileOut)\n\n      let lastStream = null\n      for (const stream of streams) {\n        stream.on(\"error\", reject)\n        if (lastStream == null) {\n          lastStream = stream\n        }\n        else {\n          lastStream = lastStream.pipe(stream)\n        }\n      }\n\n      const firstStream = streams[0]\n\n      const w = (index: number) => {\n        if (index >= operations.length) {\n          firstStream.end(this.fileMetadataBuffer)\n          return\n        }\n\n        const operation = operations[index++]\n\n        if (operation.kind === OperationKind.COPY) {\n          const readStream = createReadStream(this.options.oldPackageFile, {\n            fd: oldFileFd,\n            autoClose: false,\n            start: operation.start,\n            // end is inclusive\n            end: operation.end - 1,\n          })\n          readStream.on(\"error\", reject)\n          readStream.once(\"end\", () => w(index))\n          readStream.pipe(firstStream, {\n            end: false\n          })\n        }\n        else {\n          // https://github.com/electron-userland/electron-builder/issues/1523#issuecomment-327084661\n          // todo to reduce http requests we need to consolidate non sequential download operations (Multipart ranges)\n          const requestOptions = this.createRequestOptions(\"get\")\n          requestOptions.headers!!.Range = `bytes=${operation.start}-${operation.end - 1}`\n          const request = this.httpExecutor.doRequest(requestOptions, response => {\n            // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n            if (response.statusCode >= 400) {\n              reject(new HttpError(response))\n            }\n\n            response.pipe(firstStream, {\n              end: false\n            })\n            response.once(\"end\", () => w(index))\n          })\n          this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n          request.end()\n        }\n      }\n\n      firstStream.write(signature, () => w(0))\n    })\n      .finally(() => close(oldFileFd))\n  }\n\n  private computeOperations(oldBlockMap: BlockMap, newBlockMap: BlockMap) {\n    // const oldEntryMap: Map<string, Entry>\n    const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files)\n    const nameToNewBlocks = buildBlockFileMap(newBlockMap.files)\n\n    // convert kb to bytes\n    const blockSize = newBlockMap.blockSize * 1024\n\n    const oldEntryMap = buildEntryMap(oldBlockMap.files)\n\n    const operations: Array<Operation> = []\n    for (const blockMapFile of newBlockMap.files) {\n      const name = blockMapFile.name\n      const oldEntry = blockMapFile.size === 0 ? null : oldEntryMap.get(name)\n      // block map doesn't contain empty files, but we check this case just to be sure\n      if (oldEntry == null) {\n        // new file\n        operations.push({\n          kind: OperationKind.DOWNLOAD,\n          start: blockMapFile.offset,\n          end: blockMapFile.size - blockMapFile.offset,\n        })\n        continue\n      }\n\n      let lastOperation: Operation | null = null\n\n      const newFile = nameToNewBlocks.get(name)!!\n      const oldFile = nameToOldBlocks.get(name)!!\n\n      let changedBlockCount = 0\n\n      blockMapLoop:\n      for (let i = 0; i < newFile.blocks.length; i++) {\n        if (i >= oldFile.blocks.length) {\n          break\n        }\n\n        const isFirstBlock = i === 0\n        const isLastBlock = i === (newFile.blocks.length - 1)\n        const currentBlockSize = isLastBlock ? (newFile.size % blockSize) : blockSize\n\n        if (oldFile.blocks[i] === newFile.blocks[i]) {\n          if (lastOperation == null || lastOperation.kind !== OperationKind.COPY) {\n            const start = oldEntry.offset + (i * blockSize)\n            const end = start + currentBlockSize\n            if (isFirstBlock) {\n              if (operations.length > 0) {\n                const prevOperation = operations[operations.length - 1]\n                if (prevOperation.kind === OperationKind.COPY && prevOperation.end === start) {\n                  lastOperation = prevOperation\n                  prevOperation.end = end\n                  continue blockMapLoop\n                }\n              }\n            }\n\n            lastOperation = {\n              kind: OperationKind.COPY,\n              start,\n              end,\n            }\n            operations.push(lastOperation)\n          }\n          else {\n            lastOperation.end += currentBlockSize\n          }\n        }\n        else {\n          changedBlockCount++\n\n          const start = blockMapFile.offset + (i * blockSize)\n          const end = start + currentBlockSize\n          if (lastOperation == null || lastOperation.kind !== OperationKind.DOWNLOAD) {\n            lastOperation = {\n              kind: OperationKind.DOWNLOAD,\n              start,\n              end,\n            }\n            operations.push(lastOperation)\n          }\n          else {\n            lastOperation.end += currentBlockSize\n          }\n        }\n      }\n\n      if (changedBlockCount > 0) {\n        this.logger.info(`File ${blockMapFile.name} has ${changedBlockCount} changed blocks`)\n      }\n    }\n    return operations\n  }\n\n  private async readRemoteBytes(start: number, endInclusive: number) {\n    const buffer = Buffer.allocUnsafe((endInclusive + 1) - start)\n    const requestOptions = this.createRequestOptions()\n    requestOptions.headers!!.Range = `bytes=${start}-${endInclusive}`\n    let position = 0\n    await this.request(requestOptions, chunk => {\n      chunk.copy(buffer, position)\n      position += chunk.length\n    })\n    return buffer\n  }\n\n  private request(requestOptions: RequestOptions, dataHandler: (chunk: Buffer) => void) {\n    return new BluebirdPromise((resolve, reject) => {\n      const request = this.httpExecutor.doRequest(requestOptions, response => {\n        // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n        if (response.statusCode >= 400) {\n          reject(new HttpError(response))\n        }\n\n        if (response.statusCode !== 206) {\n          const acceptRanges = safeGetHeader(response, \"accept-ranges\")\n          if (acceptRanges == null || acceptRanges === \"none\") {\n            reject(new Error(\"Server doesn't support Accept-Ranges\"))\n          }\n        }\n\n        response.on(\"data\", dataHandler)\n        response.on(\"end\", () => {\n          resolve()\n        })\n      })\n      this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n      request.end()\n    })\n  }\n}\n\nenum OperationKind {\n  COPY, DOWNLOAD\n}\n\ninterface Operation {\n  kind: OperationKind\n\n  start: number\n  end: number\n}\n\nfunction buildEntryMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}\n\nfunction buildBlockFileMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}\n\nasync function readBlockMap(data: Buffer): Promise<BlockMap> {\n  return safeLoad((await inflateRaw(data)).toString())\n}\n\nfunction formatBytes(value: number, symbol = \" KB\") {\n  return new Intl.NumberFormat(\"en\").format((value / 1024).toFixed(2) as any) + symbol\n}"]}
