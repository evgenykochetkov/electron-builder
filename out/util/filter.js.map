{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../src/util/filter.ts"],"names":[],"mappings":";;;;;;;;AAGA,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAoC,AAAE,AAAM,AAAuB;;;;;;AAE5E,AAAgB,AAChB,AAAM;kBAAmB,AAAkB;AACzC,UAAM,AAAG,MAAG,AAAO,QAAC,AAAG;AACvB,AAAE,AAAC,QAAC,AAAG,IAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AACnB,AAAM,eAAC,AAAI,AACb;AAAC;AAED,AAAG,AAAC,SAAC,MAAM,AAAC,KAAI,AAAG,IAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACvB,AAAE,AAAC,YAAC,OAAO,AAAC,MAAK,AAAQ,AAAC,UAAC,AAAC;AAC1B,AAAM,mBAAC,AAAI,AACb;AAAC,AACH;AAAC;AAED,AAAM,WAAC,AAAK,AACd;AAAC;AAED,AAAgB,AAChB,AAAM;sBAAuB,AAAW,KAAE,AAA0B,UAAE,AAAyC;AAC7G,AAAM,WAAC,CAAC,AAAE,IAAE,AAAI,AAAE,AAAE;AAClB,AAAE,AAAC,YAAC,AAAG,QAAK,AAAE,AAAC,IAAC,AAAC;AACf,AAAM,mBAAC,AAAI,AACb;AAAC;AAED,cAAM,AAAQ,WAAG,AAAoC,gGAAC,AAAI,MAAC,AAAQ,SAAC,AAAG,KAAE,AAAE,AAAC,AAAC;AAE7E,AAAmE;AACnE,AAAM,eAAC,AAAY,aAAC,AAAQ,UAAE,AAAQ,UAAE,AAAI,AAAC,AAAI,UAAC,AAAe,mBAAI,AAAI,QAAI,AAAI,KAAC,AAAW,AAAE,iBAAI,CAAC,AAAY,aAAC,AAAQ,UAAE,AAAe,mBAAI,AAAE,IAAE,AAAI,AAAC,AAAC,AAC1J;AAAC,AACH;AAAC;AAED,AAAgE;AAChE,sBAAsB,AAAY,MAAE,AAA0B,UAAE,AAAW;AACzE,QAAI,AAAK,QAAG,AAAK;AACjB,AAAG,AAAC,SAAC,MAAM,AAAO,WAAI,AAAQ,AAAC,UAAC,AAAC;AAC/B,AAAqD;AACrD,AAAyD;AACzD,AAAE,AAAC,YAAC,AAAK,UAAK,AAAO,QAAC,AAAM,AAAC,QAAC,AAAC;AAC7B,AAAQ,AACV;AAAC;AAED,AAAqE;AACrE,AAAoM;AACpM,AAAK,gBAAG,AAAO,QAAC,AAAK,MAAC,AAAI,MAAE,AAAI,KAAC,AAAW,AAAE,iBAAI,CAAC,AAAO,QAAC,AAAM,AAAC,AACpE;AAAC;AACD,AAAM,WAAC,AAAK,AACd;AAAC","sourcesContent":["import { Filter } from \"builder-util/out/fs\"\nimport { Stats } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { relativeUpwardsPathToNodeModulesPath } from \"./AppFileCopierHelper\"\n\n/** @internal */\nexport function hasMagic(pattern: Minimatch) {\n  const set = pattern.set\n  if (set.length > 1) {\n    return true\n  }\n\n  for (const i of set[0]) {\n    if (typeof i !== \"string\") {\n      return true\n    }\n  }\n\n  return false\n}\n\n/** @internal */\nexport function createFilter(src: string, patterns: Array<Minimatch>, excludePatterns?: Array<Minimatch> | null): Filter {\n  return (it, stat) => {\n    if (src === it) {\n      return true\n    }\n\n    const relative = relativeUpwardsPathToNodeModulesPath(path.relative(src, it))\n\n    // https://github.com/electron-userland/electron-builder/issues/867\n    return minimatchAll(relative, patterns, stat) && (excludePatterns == null || stat.isDirectory() || !minimatchAll(relative, excludePatterns || [], stat))\n  }\n}\n\n// https://github.com/joshwnj/minimatch-all/blob/master/index.js\nfunction minimatchAll(path: string, patterns: Array<Minimatch>, stat: Stats): boolean {\n  let match = false\n  for (const pattern of patterns) {\n    // If we've got a match, only re-test for exclusions.\n    // if we don't have a match, only re-test for inclusions.\n    if (match !== pattern.negate) {\n      continue\n    }\n\n    // partial match — pattern: foo/bar.txt path: foo — we must allow foo\n    // use it only for non-negate patterns: const m = new Minimatch(\"!node_modules/@(electron-download|electron)/**/*\", {dot: true }); m.match(\"node_modules\", true) will return false, but must be true\n    match = pattern.match(path, stat.isDirectory() && !pattern.negate)\n  }\n  return match\n}\n"]}
